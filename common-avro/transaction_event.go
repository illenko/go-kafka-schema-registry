// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     transaction_event.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TransactionEvent struct {
	TransactionId string `json:"transactionId"`

	UserId string `json:"userId"`

	Amount float64 `json:"amount"`

	Currency string `json:"currency"`

	Timestamp int64 `json:"timestamp"`

	Status string `json:"status"`

	EventType string `json:"eventType"`
}

const TransactionEventAvroCRC64Fingerprint = "\x87I\xde!Ç„\xfeD"

func NewTransactionEvent() TransactionEvent {
	r := TransactionEvent{}
	return r
}

func DeserializeTransactionEvent(r io.Reader) (TransactionEvent, error) {
	t := NewTransactionEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTransactionEventFromSchema(r io.Reader, schema string) (TransactionEvent, error) {
	t := NewTransactionEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTransactionEvent(r TransactionEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.TransactionId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UserId, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Amount, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Currency, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EventType, w)
	if err != nil {
		return err
	}
	return err
}

func (r TransactionEvent) Serialize(w io.Writer) error {
	return writeTransactionEvent(r, w)
}

func (r TransactionEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"string\"}],\"name\":\"com.fintech.TransactionEvent\",\"type\":\"record\"}"
}

func (r TransactionEvent) SchemaName() string {
	return "com.fintech.TransactionEvent"
}

func (_ TransactionEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TransactionEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TransactionEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TransactionEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TransactionEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TransactionEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TransactionEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ TransactionEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TransactionEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.TransactionId}

		return w

	case 1:
		w := types.String{Target: &r.UserId}

		return w

	case 2:
		w := types.Double{Target: &r.Amount}

		return w

	case 3:
		w := types.String{Target: &r.Currency}

		return w

	case 4:
		w := types.Long{Target: &r.Timestamp}

		return w

	case 5:
		w := types.String{Target: &r.Status}

		return w

	case 6:
		w := types.String{Target: &r.EventType}

		return w

	}
	panic("Unknown field index")
}

func (r *TransactionEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TransactionEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TransactionEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TransactionEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TransactionEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ TransactionEvent) Finalize()                        {}

func (_ TransactionEvent) AvroCRC64Fingerprint() []byte {
	return []byte(TransactionEventAvroCRC64Fingerprint)
}

func (r TransactionEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["transactionId"], err = json.Marshal(r.TransactionId)
	if err != nil {
		return nil, err
	}
	output["userId"], err = json.Marshal(r.UserId)
	if err != nil {
		return nil, err
	}
	output["amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["currency"], err = json.Marshal(r.Currency)
	if err != nil {
		return nil, err
	}
	output["timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["eventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TransactionEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["transactionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransactionId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for transactionId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["userId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UserId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for userId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["currency"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Currency); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for currency")
	}
	val = func() json.RawMessage {
		if v, ok := fields["timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for timestamp")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["eventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eventType")
	}
	return nil
}
